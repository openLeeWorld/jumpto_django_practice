python -m venv mysite(가상환경 생성) -> activate, deactivate
django-admin startproject config .
django-admin startapp pybo
django-admin createsuperuser admin	
python manage.py makemigrations (db 모델 변경사항 등록)
python manage.py migrate (db 모델 실제 적용)
python manage.py runserver (서버시작)
python manage.py shell(쉘 시작)
python mange.py collectstatic(관리자 앱의 정적파일 복사 -> 운영환경의 )
ㄴ mysite(가상환경 경로)\Lib\site-packages\django\contrib\admin\static\admin 에 /admin 정적파일이 있으므로 옮겨줌

변경된 프로그램 서버에 적용하기
로컬 -----------------------------
1. git add *
2. git commit -m "수정 내용 커멘트"
3. git push (origin main)

서버 -----------------------------
1. git pull (서버는 파일 변경 금지, 충돌남)
2. sudo systemctl restart mysite.service (gunicorn 재시작)

gunicorn(WSGI)는 포트보다는 유닉스 소켓을 사용하는 것이 좋고 
반드시 NGINX 등의 web server와 연동한다. 
(출처: 점프 투 장고 WSGI, Gunicorn, Nginx에서 설정하기)

장고 로그 레벨: DEBUG < INFO < WARNING < ERROR < CRITICAL
운영 서버 로그 방법)
1. 관리자 이메일로 오류 내용 발송(관리자 이메일, smtp 설정)
2. 특정 파일에 오류 출력 -> 로그 정리 방법: RotateFileHandler 

로그 확인: tail -f logs/mysite.log

도메인 등록 방법: amazon 53, gabia 등 (유료)
ㄴ nginx의 /etc/nginx/site-available/mysite의 server_name <domain>; 설정 (실제 적용은 /etc/nginx/site-enabled/mysite, sudo ln -f 로 심볼릭 연결 가능)

postgresql 연결 방법: 
1. aws lightsail db 생성 (사용자 이름, 암호, 엔드포인트 확인)
2. 서버: sudo apt install postgresql-client
3. createdb pybo --username=dbmasteruser -h <데이터베이스 주소 or 엔드포인트> -> 암호 입력
4. 장고에서 postgresql 서버 접속: pip install psycopg2-binary (postgresql connector for postgresql, version2)
5. (로컬, 서버) 환경변수파일: pip install django-environ
6. .env: (보안상 서버에 직접 접속 후 설정)
DB_NAME = pybo 
DB_USER = dbmasteruser
DB_HOST = <엔드포인트>
DB_PASSWORD = <암호>
7. migrate로 SQLite에서 Postgresql로 옮김, createsuperuser 다시 생성
